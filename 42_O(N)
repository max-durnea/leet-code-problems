class Solution:
    def trap(self, height: List[int]) -> int:
        #solution with O(n) memory
        maxLeft = [0] * len(height)
        maxRight = [0] * len(height)
        minLeftRight = [0] * len(height)
        maximum=height[0]
        for i in range(1,len(height)):
            if height[i-1]>maximum:
                maximum=height[i-1]
            maxLeft[i]=maximum
        maximum=height[len(height)-1]
        for i in range(len(height)-2,-1,-1):
            if height[i+1]>maximum:
                maximum=height[i+1]
            maxRight[i]=maximum
        print(maxRight)
        print(maxLeft)
        max_volume=0
        for i in range(0,len(height)-1):
            volume=min(maxLeft[i],maxRight[i])-height[i]
            if(volume >=0):
                max_volume+=volume
        return max_volume
